version: "3.8"

networks:
  traefik:
    external: true
    name: traefik
  default:
    driver: bridge

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: # CLI Arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow Cloudflare IPs to set X-Forwarded-* headers
      - --entryPoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      # - --api.insecure=true
      # - --servers.Transport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      traefik: 
        ipv4_address: 10.1.11.254 # Static traefik IP
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $USERDIR/docker/traefik/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/traefik/acme/acme.json:/acme.json
      - $USERDIR/docker/traefik/traefik.log:/traefik.log
      - $USERDIR/docker/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entryPoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certResolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.services.traefik-rtr.loadbalancer.server.port=8080"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.253
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      traefik:
        ipv4_address: 10.1.11.252
    security_opt:
      - no-new-privileges:true
      # ports:
      # - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/docker/portainer/data:/data 
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
        # - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
        # - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # AdGuard Home - DNS Server with Ad Blocking
  adguard:
    container_name: adguard
    image: adguard/adguardhome:latest
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.1
    security_opt:
      - no-new-privileges:true
    volumes:
      - $USERDIR/docker/adguard/work:/opt/adguardhome/work
      - $USERDIR/docker/adguard/conf:/opt/adguardhome/conf
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.adguard-rtr.entrypoints=https"
      - "traefik.http.routers.adguard-rtr.rule=Host(`adguard.$DOMAINNAME`)"
      - "traefik.http.routers.adguard-rtr.tls=true"
      ## Middlewares
        # - "traefik.http.routers.adguard-rtr.middlewares=chain-no-auth@file" # No Authentication
        # - "traefik.http.routers.adguard-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.adguard-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.adguard-rtr.service=adguard-svc"
      - "traefik.http.services.adguard-svc.loadbalancer.server.port=3000"

  # Organizr - Unified Frontend
  organizr:
    container_name: organizr
    image: organizrtools/organizr-v2:latest
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.251
    security_opt:
      - no-new-privileges:true
    # ports:
      # - "$ORGANIZR_PORT:80"
    volumes:
      - $USERDIR/docker/organizr:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`$DOMAINNAME`,`www.$DOMAINNAME`)" 
      - "traefik.http.routers.organizr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=chain-oauth@file" 
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

  # MariaDB - MySQL Database
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      traefik:
        ipv4_address: 10.1.11.250
    security_opt:
      - no-new-privileges:true
    ports:
      - "3306:3306"
    volumes:
      - $USERDIR/docker/mariadb/data:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD

  # phpMyAdmin - Mysql Database management
  # Create a new user with admin privileges. Cannot login as MySQL root for some reason.
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.249
    security_opt:
      - no-new-privileges:true
      # ports:
        # - "$PHPMYADMIN_PORT:80"
      # volumes:
      # - $USERDIR/docker/phpmyadmin:/etc/phpmyadmin
    environment:
      - PMA_HOST=$MYSQL_HOST
      - PMA_PORT=$MYSQL_PORT
      - PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      - "traefik.http.routers.phpmyadmin-rtr.tls=true"
      # - "traefik.http.routers.phpmyadmin-rtr.tls.certresolver=dns-cloudflare" 
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  # Postgres - Database
  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.248
    security_opt:
      - no-new-privileges:true
    volumes:
      - $USERDIR/docker/postgres:/var/lib/postgresql/data
    command:
      --user=$PUID:$PGID
    environment:
      - POSTGRES_PASSWORD=$PGSQL_ROOT_PASSWORD

  # pgAdmin - Postgres Database management
  pgadmin:
    image: thajeztah/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.247
    security_opt:
      - no-new-privileges:true
      # ports:
        # - "$pgadmin_PORT:80"
    volumes:
      - $USERDIR/docker/postgres/pgadmin:/pgadmin
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGADMIN_DEFAULT_EMAIL=$PGADMIN_EMAIL
      - PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.pgadmin-rtr.entrypoints=https"
      - "traefik.http.routers.pgadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      - "traefik.http.routers.pgadmin-rtr.tls=true"
      # - "traefik.http.routers.pgadmin-rtr.tls.certresolver=dns-cloudflare" 
      ## Middlewares
      - "traefik.http.routers.pgadmin-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.pgadmin-rtr.service=pgadmin-svc"
      - "traefik.http.services.pgadmin-svc.loadbalancer.server.port=5050"

  # Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser 
  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.246
    security_opt:
      - no-new-privileges:true
    # ports:
      # - "$GUACAMOLE_PORT:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: $MYSQL_HOST
      MYSQL_PORT: $MYSQL_PORT
      MYSQL_DATABASE: guacamole
      MYSQL_USER: $GUAC_MYSQL_USER
      MYSQL_PASSWORD: $GUAC_MYSQL_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME`)"
      - "traefik.http.routers.guacamole-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=chain-oauth@file,add-guacamole" 
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      ## HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

  # Guacamole Daemon - Needed for Guacamole
  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.245
    security_opt:
      - no-new-privileges:true

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      traefik:
        ipv4_address: 10.1.11.244
    security_opt:
      - no-new-privileges:true
    # ports:
    # - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      - "traefik.http.routers.dozzle-rtr.tls=true"
      # - "traefik.http.routers.dozzle-rtr.tls.certresolver=dns-cloudflare" 
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file" 
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # Bitwarden - Password Vault
  bitwarden:
    container_name: bitwarden
    image: bitwardenrs/server:latest
    restart: always
    networks:
      traefik:
        ipv4_address: 10.1.11.243
    user: $PUID:$PGID
    # ports:
    # - "80:80"
    # - "3012:3012"
    volumes:
      - $USERDIR/docker/bitwarden:/data
      - /var/log/docker:/var/log/docker
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - SIGNUPS_ALLOWED=true # Change to false after first login
      - INVITATIONS_ALLOWED=true # Send invitation using admin page
      - WEBSOCKET_ENABLED=true
      - LOG_FILE=/var/log/docker/bitwarden.log
      - SMTP_HOST=smtp.gmail.com
      - SMTP_FROM=$SMTP_EMAIL
      - SMTP_PORT=587
      - SMTP_SSL=true
      - SMTP_USERNAME=$SMTP_EMAIL
      - SMTP_PASSWORD=$SMTP_PASS
      - DOMAIN=https://bitwarden.$DOMAINNAME
      - ROCKET_PORT=8080
      - PUID=$PUID
      - PGID=$PGID
      # - DISABLE_ADMIN_TOKEN=true ### USE WITH CAUTION!! Access admin page at bitwarden.$DOMAINNAME/admin to send invitations - anyone can access, add authorization!!!
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bitwarden-rtr.entrypoints=https"
      - "traefik.http.routers.bitwarden-rtr.rule=Host(`bitwarden.$DOMAINNAME`)"
      - "traefik.http.routers.bitwarden-rtr.priority=1"
      - "traefik.http.routers.bitwarden-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.bitwarden-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.bitwarden-rtr.service=bitwarden-svc"
      - "traefik.http.services.bitwarden-svc.loadbalancer.server.port=8080"
      ## Bitwarden WebSocket
      - "traefik.http.routers.bitwardenHub-rtr.entrypoints=https"
      - "traefik.http.routers.bitwardenHub-rtr.rule=(Host(`bitwarden.$DOMAINNAME`) && Path(`/notifications/hub`))"
      - "traefik.http.routers.bitwardenHub-rtr.priority=2"
      - "traefik.http.routers.bitwardenHub-rtr.tls=true"
      - "traefik.http.routers.bitwardenHub-rtr.service=bitwardenHub-svc"
      - "traefik.http.services.bitwardenHub-svc.loadbalancer.server.port=3012"
      ## Admin Page - Used when DISABLE_ADMIN_TOKEN=true above
      - "traefik.http.routers.bitwardenAdmin-rtr.entrypoints=https"
      - "traefik.http.routers.bitwardenAdmin-rtr.rule=(Host(`bitwarden.$DOMAINNAME`) && Path(`/admin`))"
      - "traefik.http.routers.bitwardenAdmin-rtr.priority=3"
      - "traefik.http.routers.bitwardenAdmin-rtr.tls=true"
      - "traefik.http.routers.bitwardenAdmin-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.bitwardenAdmin-rtr.service=bitwarden-svc"